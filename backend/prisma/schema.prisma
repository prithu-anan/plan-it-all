datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Route {
  id             Int               @id @default(autoincrement())
  comment        String?           // Optional comment about the route
  score          Float?            // Optional score or rating for the route

  // Foreign keys to Description with unique constraints
  srcId          Int    @unique
  src            Description       @relation("RouteSrc", fields: [srcId], references: [id])

  destId         Int    @unique
  dest           Description       @relation("RouteDest", fields: [destId], references: [id])

  // One-to-one relation with Trip
  trip           Trip?
  
  transportations Transportation[]
}

model Trip {
  id             Int      @id @default(autoincrement())
  routeId        Int      @unique
  route          Route    @relation(fields: [routeId], references: [id])
  
  userId         Int
  user           User     @relation(fields: [userId], references: [id])

  startDate      DateTime
  endDate        DateTime
  budget         Float

  images         Image[]
  blog           Blog?
}

model Image {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  tripId      Int?
  trip        Trip?    @relation(fields: [tripId], references: [id])

  url         String
  description String   // For natural language search
  uploadedAt  DateTime @default(now())
}

model Blog {
  id          Int      @id @default(autoincrement())
  tripId      Int      @unique
  trip        Trip     @relation(fields: [tripId], references: [id])

  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  title       String
  content     String
  createdAt   DateTime @default(now())
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String

  trips       Trip[]
  images      Image[]
  blogs       Blog[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transportation {
  id      Int     @id @default(autoincrement())
  name    String  // e.g., 'bus + ferry', 'truck + bike'

  routeId Int
  route   Route   @relation(fields: [routeId], references: [id])

  waypoints Waypoint[]
}

model Waypoint {
  id         Int    @id @default(autoincrement())
  medium     String // e.g., 'bus', 'ferry'
  time       String // e.g., '6-7 hours'
  cost       Int

  transportationId Int
  transportation   Transportation @relation(fields: [transportationId], references: [id])

  descriptions Description[]
}

model Description {
  id         Int    @id @default(autoincrement())
  latitude   Float
  longitude  Float
  geojson    Json?  // Optional geojson data

  routeSrc   Route? @relation("RouteSrc")
  routeDest  Route? @relation("RouteDest")

  waypointId Int?
  waypoint   Waypoint? @relation(fields: [waypointId], references: [id])
}
