datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Route {
  id             Int    @id @default(autoincrement())

  srcId          Int
  src            Description @relation("RouteSrc", fields: [srcId], references: [id])

  destId         Int
  dest           Description @relation("RouteDest", fields: [destId], references: [id])

  trip           Trip?  // One-to-one relation with Trip

  transportations Transportation[]
}
model Trip {
  id             Int    @id @default(autoincrement())
  routeId        Int    @unique
  route          Route  @relation(fields: [routeId], references: [id], onDelete: Cascade)

  userId         Int
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  startDate      DateTime
  endDate        DateTime
  budget         Float

  images         Image[]
  blog           Blog?
}

model Image {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id])

  tripId           Int?
  trip             Trip?    @relation(fields: [tripId], references: [id])

  url              String
  aiGeneratedCaption String?
  userComment      String?
  location         String
  uploadedAt       DateTime
}

model Blog {
  id          Int      @id @default(autoincrement())
  tripId      Int      @unique
  trip        Trip     @relation(fields: [tripId], references: [id])

  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  title       String
  content     String
  createdAt   DateTime @default(now())
}
model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String

  trips       Trip[]
  images      Image[]
  blogs       Blog[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transportation {
  id      Int     @id @default(autoincrement())
  name    String
  comment        String?
  score          Float?
  routeId Int
  route   Route   @relation(fields: [routeId], references: [id])

  waypoints Waypoint[]
}

model Waypoint {
  id         Int    @id @default(autoincrement())
  medium     String
  time       String
  cost       Int

  transportationId Int
  transportation   Transportation @relation(fields: [transportationId], references: [id])

  descriptions Description[]
}


model Description {
  id         Int    @id @default(autoincrement())
  name       String
  latitude   Float
  longitude  Float
  geojson    Json?

  routesSrc  Route[] @relation("RouteSrc")  // One-to-many relation
  routesDest Route[] @relation("RouteDest") // One-to-many relation

  waypointId Int?
  waypoint   Waypoint? @relation(fields: [waypointId], references: [id])
}